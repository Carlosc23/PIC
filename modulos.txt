/*
Componente: Program Counter
Referencia http://www.asic-world.com/code/hdl_models/up_counter.v
*/

module PC(out, enable , clk, reset);
  output [10:0] out;
  input enable, clk, reset;
  reg [10:0] out;
  always @(posedge clk)
  if (reset) begin
    out <= 10'b0 ;
  end else if (enable) begin
    out <= out + 1;
  end
endmodule 


/*
Componente: Instruction memory
Referencia: Blackboard
*/
module Inst_Memory(clk, enable, address, out);
  input clk; 
  input enable;
  input [10:0] address;
  output [11:0] out;
  
  
  reg [11:0] out;
  reg [11:0] memory [0:1024];
  always @ (posedge clk)
    if (enable) begin
      out <= memory[address];
    end
  
initial begin
 $readmemh("memory.list", memory);
end
endmodule


/*
Componente: Registros
*/
module Registers(clk, ADDR, enable, DataIn, DataOut);
  input clk;
  input [6:0] ADDR;
  input [7:0] DataIn;
  input enable;
  output [7:0] DataOut;
  
  reg [7:0] DataOut;
  reg [7:0] memory [0:15]; 
  
  always @ (posedge clk)
    if(enable) begin
      DataOut <= memory[ADDR];   
    end else begin
      memory[ADDR] <= DataIn;
    end
endmodule
  
module wreg(dataIn, enable, dataOut);
  input [7:0] dataIn
  input enable
  output [7:0] dataOut
  
  reg [7:0] dataOut
  
  always @ (posedge clk)
    if(enable) begin
      DataOut <= mem
      
      ory[ADDR];   
    end else begin
      memory[ADDR] <= DataIn;
    end
endmodule  


